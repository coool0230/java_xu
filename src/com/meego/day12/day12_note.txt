HashMap的内存存储机制
	数组 + 链表
	数组 == 桶的数量
	
HashSet 内部是用HashMap 实现的	
add(s)  -------> put(k,value)----->put(s,+垃圾对象)

hash
------------------------
1.高16位无符号右移16位,与低16位做^(异或)运算
2.得到的整形数值与0xf 做&(且)运算



List
------------------------
	ArrayList		//非线程安全
	LinkedList		//非线程安全
	Vector			//线程安全
	

Set
--------------------------
	HashSet------>本质是由HashMap 实现的
	
	
TreeSet:有序的集合,Compareable接口
-----------------------------
	排序实现方式
	1.实现Compareable接口,interface Compateable{}
	2.Comparator  对比器
	

Map
--------------------------
	HashMap   key(键)----value(值)
	HashTable	线程安全
	
变长参数必须是方法的最后一个参数
---------------------------
	只能有一个
	

IO: Input  OutPut
-----------------------------
	1.输入输出
	2.Stream
	3.流的类型
		按数据类型:
		a.字符流:操纵文本			Readed   | Writer
		b.字节流:二进制文件		InputStream   |   OutputStream
		按流向:
		a.输入:读操作
		b.输出:写操作
		

flush
-----------------------------
	清理


refresh
----------------------------
	刷新
	
clear
------------------------------
	清空

java.io.Reader
----------------------------

java.io.FileWriter
-------------------------------
	1.new FileWriter(String path);
	2.write(String str);
		写入字符数据到流种
	3.flush()
		清理流,将六中的数据写入到目标设备上
	4.close()
		关闭流,隐含了flush()操作
	5.流在close之后不能再写入数据了
		重复关闭不会导致问题

目的
----------------------------
	1.如果无第一步,name将数值与0xf做&运算,name高16位所表现的特征将被丢失
	如果有第一步,name将原始的哈希码值的高位和低位做了混合,那么在新计算出来的低16位数值  中
	掺杂了高16位的部分特征,高16位的信息也将被保留下来,采用^而不采用& | 的原因:
		采用^运算能更好的保留各部分的特征,不至于像0或者1靠拢
	2.为了保证得到的数值,落在桶的下标之间,得到对应的下标,明确放在哪个桶里
	

作业
--------------------------------
	1.List Set  Map区别  以及HashSet 和 HashMap的关系
	
	2.Student(byte age,byte height,byte weight){}
	
	3.边长参数 + 增强for循环
	
	4.使用FileWriter,将1-1000000写入到文本中
	
	5.实现文件的复制
		d:\1.txt
		d:\2.txt
		
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
作业
--------------------------------
	1.List,Set,Map的区别,以及HashSet和HashMap的关系
	2.