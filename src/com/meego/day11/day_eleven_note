集合体结构
-------------------------------
	java.lang.Iterable
		java.util.Collection
			java.utl.List
			

			
List
--------------------------------
	1.可以重复元素
		判断重复/存在   只跟equals方法有关
		如果是集合中的对象,但是equals方法返回了false,contains() 返回false
	2.有序
	3.ArrayList
		底层通过数组[]  来实现
		优缺点:查询快,写入慢
	4.LinkedList
		链表,手拉手结构
	
toString
-------------------------
	必要时候可以重写
	继承于java.lang.object
	

	== 和 equals的区别
		1.==   
			判断对象是否是同一个,地址是否相同
		2.equals
			判断对象的内容是否相同,默认调用的是Object的equals方法,而该方法判断的仍然是地址是否相同
			
		3.equals方法如果不重写,和== 的效果一样
		
set
-----------------------------------
	1.不能重复
	2.无序
	

	
Map
----------------------------------------------
	1.映射
	2.key --value 对  组成entry(条目)
	3.key 不能重复,无序
	4.map的size 就是entry的数量
	5.Map接口是单独的接口,没有继承任何接口
		与之前的JDK版本不同
		引用了COLLECTION的方法
	6.put
		放入元素
		将key和value 进行关联,如果key已存在,则value被覆盖
	7.get(Key)
		提取元素
	8.迭代
		entrySet
		keySet
	9.remove(key)
		删除条目
	10.HashMap.hash()方法意义
		将新hash值跟更多的特征值相关
		异或运算 可以使hash值更加的分散,或 大概率分布在大数值  与 运算大概率分散在小数值 
		
	11.Nonde<K,V>
		class Node<K,V>{
			int hash;	//新哈希
			final k key ;//key不能修改
			V value;
			Node<K,V> next;
	12.元素重复的判断标准
		p.hash == hash && ((k = p.eky) == key || (key != null && key.equals(k)))
		
	13.new hash
		p.hash == hash && ((k = p.eky) == key || (key != null && key.equals(k)))
			a.new hash 不同,对象不同
			b.new hash相同,对象是同一对象,则对象相同
			c.new hash相同,对象不是同一对象,再判断equals方法,如果equals相同,则对象相同
			hashcode:
				采用按位运算

java.lang.Object
--------------------------------------
	
			
			
		
		

作业
--------------------------------------------
	1.hashMap种的hash算法的实现原理,阐述出来
		移位 + ^(异或)运算
		int hashcode = o.hashCode()
		int a = hashcode >>> 16
		int newhash = a ^ hashcode
		
	2.创建一个类Student
		有int height,int weight,int age,重写equals和hashcode
		equals方法实现原则:三个属性都相同,即为对象相同.
		hashcode
		
	3.使用Map集合实现集合嵌套
		Map:key(String) -value对
		
		//名单集合(一个班)
		//key :学号 No100 Value:tom-xxx
		Map<String,String> names = ....
		
		//班级集合(一个年级)
		Map<String,Map<String,String>> classes ...
		
		//年级集合
		Map<String,Map<String,Map<String,String>>> grades = ...
		
		

ArrayList
HashSet
LinkedList
	